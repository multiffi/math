package multiffi.math.spi;

import java.math.RoundingMode;
import java.util.Objects;
import java.util.ServiceLoader;

public abstract class MathProvider {

    private static volatile MathProvider IMPLEMENTATION;
    private static final Object IMPLEMENTATION_LOCK = new Object();
    public static MathProvider getImplementation() {
        if (IMPLEMENTATION == null) synchronized (IMPLEMENTATION_LOCK) {
            if (IMPLEMENTATION == null) {
                try {
                    IMPLEMENTATION = (MathProvider) Class
                            .forName(Objects.requireNonNull(System.getProperty("multiffi.math.provider")))
                            .getDeclaredConstructor()
                            .newInstance();
                } catch (Throwable e) {
                    try {
                        for (MathProvider provider : ServiceLoader.load(MathProvider.class)) {
                            if (provider != null) {
                                IMPLEMENTATION = provider;
                                break;
                            }
                        }
                    }
                    catch (Throwable ex) {
                        IMPLEMENTATION = null;
                    }
                }
                if (IMPLEMENTATION == null) throw new IllegalStateException("Failed to get any installed multiffi.math.spi.MathProvider instance");
            }
        }
        return IMPLEMENTATION;
    }

    public abstract float toRadians(float degrees);
    public abstract double toRadians(double degrees);
    public abstract float toDegrees(float radians);
    public abstract double toDegrees(double radians);
    public abstract float sin(float angle);
    public abstract double sin(double angle);
    public abstract float cos(float angle);
    public abstract double cos(double angle);
    public abstract float tan(float angle);
    public abstract double tan(double angle);
    public abstract float sinCos(float cosSin, float angle);
    public abstract double sinCos(double cosSin, double angle);
    public abstract float asin(float angle);
    public abstract double asin(double angle);
    public abstract float acos(float angle);
    public abstract double acos(double angle);
    public abstract float atan(float angle);
    public abstract double atan(double angle);
    public abstract float safeAsin(float angle);
    public abstract double safeAsin(double angle);
    public abstract float safeAcos(float angle);
    public abstract double safeAcos(double angle);
    public abstract float atan2(float y, float x);
    public abstract double atan2(double y, double x);
    public abstract float sinh(float angle);
    public abstract double sinh(double angle);
    public abstract float cosh(float angle);
    public abstract double cosh(double angle);
    public abstract float tanh(float angle);
    public abstract double tanh(double angle);
    public abstract float asinh(float angle);
    public abstract double asinh(double angle);
    public abstract float acosh(float angle);
    public abstract double acosh(double angle);
    public abstract float atanh(float angle);
    public abstract double atanh(double angle);
    public abstract float pow(float base, float exponent);
    public abstract double pow(double base, double exponent);
    public abstract float square(float base);
    public abstract double square(double base);
    public abstract float cube(float base);
    public abstract double cube(double base);
    public abstract float exp(float exponent);
    public abstract double exp(double exponent);
    public abstract float expm1(float exponent);
    public abstract double expm1(double exponent);
    public abstract float log(float base, float power);
    public abstract double log(double base, double power);
    public abstract float log(float power);
    public abstract double log(double power);
    public abstract float log10(float power);
    public abstract double log10(double power);
    public abstract float log2(float power);
    public abstract double log2(double power);
    public abstract float log1p(float power);
    public abstract double log1p(double power);
    public abstract float root(float exponent, float power);
    public abstract double root(double exponent, double power);
    public abstract float invroot(float exponent, float power);
    public abstract double invroot(double exponent, double power);
    public abstract float sqrt(float power);
    public abstract double sqrt(double power);
    public abstract float cbrt(float power);
    public abstract double cbrt(double power);
    public abstract float invsqrt(float power);
    public abstract double invsqrt(double power);
    public abstract float invcbrt(float power);
    public abstract double invcbrt(double power);
    public abstract float up(float value);
    public abstract double up(double value);
    public abstract float down(float value);
    public abstract double down(double value);
    public abstract float ceiling(float value);
    public abstract double ceiling(double value);
    public abstract float floor(float value);
    public abstract double floor(double value);
    public abstract float halfUp(float value);
    public abstract double halfUp(double value);
    public abstract float halfDown(float value);
    public abstract double halfDown(double value);
    public abstract float halfEven(float value);
    public abstract double halfEven(double value);
    public abstract float trunc(float value);
    public abstract double trunc(double value);
    public abstract float truncExact(float value);
    public abstract double truncExact(double value);
    public abstract float round(float value);
    public abstract double round(double value);
    public abstract int roundToInt(float value);
    public abstract long roundToLong(double value);
    public float round(float value, RoundingMode mode) {
        if (mode == null) return round(value);
        else switch (mode) {
            case UP: return up(value);
            case DOWN: return down(value);
            case CEILING: return ceiling(value);
            case FLOOR: return floor(value);
            case HALF_UP: return halfUp(value);
            case HALF_DOWN: return halfDown(value);
            case HALF_EVEN: return halfEven(value);
            case UNNECESSARY: return truncExact(value);
            default: throw new IllegalStateException("Unexpected exception");
        }
    }
    public double round(double value, RoundingMode mode) {
        if (mode == null) return round(value);
        else switch (mode) {
            case UP: return up(value);
            case DOWN: return down(value);
            case CEILING: return ceiling(value);
            case FLOOR: return floor(value);
            case HALF_UP: return halfUp(value);
            case HALF_DOWN: return halfDown(value);
            case HALF_EVEN: return halfEven(value);
            case UNNECESSARY: return truncExact(value);
            default: throw new IllegalStateException("Unexpected exception");
        }
    }
    public abstract byte abs(byte value);
    public abstract short abs(short value);
    public abstract int abs(int value);
    public abstract long abs(long value);
    public abstract float abs(float value);
    public abstract double abs(double value);
    public abstract byte negate(byte value);
    public abstract short negate(short value);
    public abstract int negate(int value);
    public abstract long negate(long value);
    public abstract float negate(float value);
    public abstract double negate(double value);
    public abstract float ulp(float start);
    public abstract double ulp(double start);
    public abstract float nextUp(float start);
    public abstract double nextUp(double start);
    public abstract float nextDown(float start);
    public abstract double nextDown(double start);
    public abstract float reciprocalEstimate(float value);
    public abstract double reciprocalEstimate(double value);
    public abstract float reciprocalSqrtEstimate(float value);
    public abstract double reciprocalSqrtEstimate(double value);
    public abstract float reciprocalCbrtEstimate(float value);
    public abstract double reciprocalCbrtEstimate(double value);
    public abstract byte reverse(byte value);
    public abstract short reverseBytes(short value);
    public abstract short reverse(short value);
    public abstract int reverseBytes(int value);
    public abstract int reverse(int value);
    public abstract long reverseBytes(long value);
    public abstract long reverse(long value);
    public abstract byte highestOneBit(byte value);
    public abstract short highestOneBit(short value);
    public abstract int highestOneBit(int value);
    public abstract long highestOneBit(long value);
    public abstract byte lowestOneBit(byte value);
    public abstract short lowestOneBit(short value);
    public abstract int lowestOneBit(int value);
    public abstract long lowestOneBit(long value);
    public abstract byte increment(byte value);
    public abstract short increment(short value);
    public abstract int increment(int value);
    public abstract long increment(long value);
    public abstract float increment(float value);
    public abstract double increment(double value);
    public abstract byte decrement(byte value);
    public abstract short decrement(short value);
    public abstract int decrement(int value);
    public abstract long decrement(long value);
    public abstract float decrement(float value);
    public abstract double decrement(double value);
    public abstract byte nearestPowerOfTwo(byte start);
    public abstract short nearestPowerOfTwo(short start);
    public abstract int nearestPowerOfTwo(int start);
    public abstract long nearestPowerOfTwo(long start);
    public abstract byte unsignedNearestPowerOfTwo(byte start);
    public abstract short unsignedNearestPowerOfTwo(short start);
    public abstract int unsignedNearestPowerOfTwo(int start);
    public abstract long unsignedNearestPowerOfTwo(long start);
    public abstract byte absExact(byte value);
    public abstract short absExact(short value);
    public abstract int absExact(int value);
    public abstract long absExact(long value);
    public abstract byte negateExact(byte value);
    public abstract short negateExact(short value);
    public abstract int negateExact(int value);
    public abstract long negateExact(long value);
    public abstract byte incrementExact(byte value);
    public abstract short incrementExact(short value);
    public abstract int incrementExact(int value);
    public abstract long incrementExact(long value);
    public abstract byte decrementExact(byte value);
    public abstract short decrementExact(short value);
    public abstract int decrementExact(int value);
    public abstract long decrementExact(long value);
    public abstract byte unsignedIncrementExact(byte value);
    public abstract short unsignedIncrementExact(short value);
    public abstract int unsignedIncrementExact(int value);
    public abstract long unsignedIncrementExact(long value);
    public abstract byte unsignedDecrementExact(byte value);
    public abstract short unsignedDecrementExact(short value);
    public abstract int unsignedDecrementExact(int value);
    public abstract long unsignedDecrementExact(long value);
    public abstract byte add(byte augend, byte addend);
    public abstract short add(short augend, short addend);
    public abstract int add(int augend, int addend);
    public abstract long add(long augend, long addend);
    public abstract float add(float augend, float addend);
    public abstract double add(double augend, double addend);
    public abstract byte subtract(byte minuend, byte subtrahend);
    public abstract short subtract(short minuend, short subtrahend);
    public abstract int subtract(int minuend, int subtrahend);
    public abstract long subtract(long minuend, long subtrahend);
    public abstract float subtract(float minuend, float subtrahend);
    public abstract double subtract(double minuend, double subtrahend);
    public abstract byte multiply(byte multiplicand, byte multiplier);
    public abstract short multiply(short multiplicand, short multiplier);
    public abstract int multiply(int multiplicand, int multiplier);
    public abstract long multiply(long multiplicand, long multiplier);
    public abstract float multiply(float multiplicand, float multiplier);
    public abstract double multiply(double multiplicand, double multiplier);
    public abstract byte divide(byte dividend, byte divisor);
    public abstract short divide(short dividend, short divisor);
    public abstract int divide(int dividend, int divisor);
    public abstract long divide(long dividend, long divisor);
    public abstract float divide(float dividend, float divisor);
    public abstract double divide(double dividend, double divisor);
    public abstract byte remainder(byte dividend, byte divisor);
    public abstract short remainder(short dividend, short divisor);
    public abstract int remainder(int dividend, int divisor);
    public abstract long remainder(long dividend, long divisor);
    public abstract float remainder(float dividend, float divisor);
    public abstract double remainder(double dividend, double divisor);
    public abstract float IEEEremainder(float dividend, float divisor);
    public abstract double IEEEremainder(double dividend, double divisor);
    public abstract byte floorDiv(byte dividend, byte divisor);
    public abstract short floorDiv(short dividend, short divisor);
    public abstract int floorDiv(int dividend, int divisor);
    public abstract long floorDiv(long dividend, long divisor);
    public abstract float floorDiv(float dividend, float divisor);
    public abstract double floorDiv(double dividend, double divisor);
    public abstract byte floorMod(byte dividend, byte divisor);
    public abstract short floorMod(short dividend, short divisor);
    public abstract int floorMod(int dividend, int divisor);
    public abstract long floorMod(long dividend, long divisor);
    public abstract float floorMod(float dividend, float divisor);
    public abstract double floorMod(double dividend, double divisor);
    public abstract byte ceilDiv(byte dividend, byte divisor);
    public abstract short ceilDiv(short dividend, short divisor);
    public abstract int ceilDiv(int dividend, int divisor);
    public abstract long ceilDiv(long dividend, long divisor);
    public abstract float ceilDiv(float dividend, float divisor);
    public abstract double ceilDiv(double dividend, double divisor);
    public abstract byte ceilMod(byte dividend, byte divisor);
    public abstract short ceilMod(short dividend, short divisor);
    public abstract int ceilMod(int dividend, int divisor);
    public abstract long ceilMod(long dividend, long divisor);
    public abstract float ceilMod(float dividend, float divisor);
    public abstract double ceilMod(double dividend, double divisor);
    public abstract short multiplyFull(byte multiplicand, byte multiplier);
    public abstract int multiplyFull(short multiplicand, short multiplier);
    public abstract long multiplyFull(int multiplicand, int multiplier);
    public abstract long multiplyHigh(long multiplicand, long multiplier);
    public abstract byte rotateLeft(byte value, int distance);
    public abstract short rotateLeft(short value, int distance);
    public abstract int rotateLeft(int value, int distance);
    public abstract long rotateLeft(long value, int distance);
    public abstract byte rotateRight(byte value, int distance);
    public abstract short rotateRight(short value, int distance);
    public abstract int rotateRight(int value, int distance);
    public abstract long rotateRight(long value, int distance);
    public abstract byte gcd(byte a, byte b);
    public abstract short gcd(short a, short b);
    public abstract int gcd(int a, int b);
    public abstract long gcd(long a, long b);
    public abstract byte gcd(byte a, byte b, byte c);
    public abstract short gcd(short a, short b, short c);
    public abstract int gcd(int a, int b, int c);
    public abstract long gcd(long a, long b, long c);
    public abstract byte lcm(byte a, byte b);
    public abstract short lcm(short a, short b);
    public abstract int lcm(int a, int b);
    public abstract long lcm(long a, long b);
    public abstract byte lcm(byte a, byte b, byte c);
    public abstract short lcm(short a, short b, short c);
    public abstract int lcm(int a, int b, int c);
    public abstract long lcm(long a, long b, long c);
    public abstract float hypot(float a, float b);
    public abstract double hypot(double a, double b);
    public abstract byte copySign(byte magnitude, byte sign);
    public abstract short copySign(short magnitude, short sign);
    public abstract int copySign(int magnitude, int sign);
    public abstract long copySign(long magnitude, long sign);
    public abstract float copySign(float magnitude, float sign);
    public abstract double copySign(double magnitude, double sign);
    public abstract float nextAfter(float start, float direction);
    public abstract float nextAfter(float start, double direction);
    public abstract double nextAfter(double start, double direction);
    public abstract byte unsignedDivide(byte dividend, byte divisor);
    public abstract short unsignedDivide(short dividend, short divisor);
    public abstract int unsignedDivide(int dividend, int divisor);
    public abstract long unsignedDivide(long dividend, long divisor);
    public abstract byte unsignedRemainder(byte dividend, byte divisor);
    public abstract short unsignedRemainder(short dividend, short divisor);
    public abstract int unsignedRemainder(int dividend, int divisor);
    public abstract long unsignedRemainder(long dividend, long divisor);
    public abstract byte unsignedCeilDiv(byte dividend, byte divisor);
    public abstract short unsignedCeilDiv(short dividend, short divisor);
    public abstract int unsignedCeilDiv(int dividend, int divisor);
    public abstract long unsignedCeilDiv(long dividend, long divisor);
    public abstract byte unsignedCeilMod(byte dividend, byte divisor);
    public abstract short unsignedCeilMod(short dividend, short divisor);
    public abstract int unsignedCeilMod(int dividend, int divisor);
    public abstract long unsignedCeilMod(long dividend, long divisor);
    public abstract short unsignedMultiplyFull(byte multiplicand, byte multiplier);
    public abstract int unsignedMultiplyFull(short multiplicand, short multiplier);
    public abstract long unsignedMultiplyFull(int multiplicand, int multiplier);
    public abstract long unsignedMultiplyHigh(long multiplicand, long multiplier);
    public abstract byte addExact(byte augend, byte addend);
    public abstract short addExact(short augend, short addend);
    public abstract int addExact(int augend, int addend);
    public abstract long addExact(long augend, long addend);
    public abstract byte subtractExact(byte minuend, byte subtrahend);
    public abstract short subtractExact(short minuend, short subtrahend);
    public abstract int subtractExact(int minuend, int subtrahend);
    public abstract long subtractExact(long minuend, long subtrahend);
    public abstract byte multiplyExact(byte multiplicand, byte multiplier);
    public abstract short multiplyExact(short multiplicand, short multiplier);
    public abstract int multiplyExact(int multiplicand, int multiplier);
    public abstract long multiplyExact(long multiplicand, long multiplier);
    public abstract byte divideExact(byte dividend, byte divisor);
    public abstract short divideExact(short dividend, short divisor);
    public abstract int divideExact(int dividend, int divisor);
    public abstract long divideExact(long dividend, long divisor);
    public abstract byte floorDivExact(byte dividend, byte divisor);
    public abstract short floorDivExact(short dividend, short divisor);
    public abstract int floorDivExact(int dividend, int divisor);
    public abstract long floorDivExact(long dividend, long divisor);
    public abstract byte ceilDivExact(byte dividend, byte divisor);
    public abstract short ceilDivExact(short dividend, short divisor);
    public abstract int ceilDivExact(int dividend, int divisor);
    public abstract long ceilDivExact(long dividend, long divisor);
    public abstract byte unsignedAddExact(byte augend, byte addend);
    public abstract short unsignedAddExact(short augend, short addend);
    public abstract int unsignedAddExact(int augend, int addend);
    public abstract long unsignedAddExact(long augend, long addend);
    public abstract byte unsignedSubtractExact(byte minuend, byte subtrahend);
    public abstract short unsignedSubtractExact(short minuend, short subtrahend);
    public abstract int unsignedSubtractExact(int minuend, int subtrahend);
    public abstract long unsignedSubtractExact(long minuend, long subtrahend);
    public abstract byte unsignedMultiplyExact(byte multiplicand, byte multiplier);
    public abstract short unsignedMultiplyExact(short multiplicand, short multiplier);
    public abstract int unsignedMultiplyExact(int multiplicand, int multiplier);
    public abstract long unsignedMultiplyExact(long multiplicand, long multiplier);
    public abstract byte unsignedCeilDivExact(byte dividend, byte divisor);
    public abstract short unsignedCeilDivExact(short dividend, short divisor);
    public abstract int unsignedCeilDivExact(int dividend, int divisor);
    public abstract long unsignedCeilDivExact(long dividend, long divisor);
    public abstract float fma(float multiplicand, float multiplier, float addend);
    public abstract double fma(double multiplicand, double multiplier, double addend);
    public abstract float ffma(float multiplicand, float multiplier, float addend);
    public abstract double ffma(double multiplicand, double multiplier, double addend);
    public abstract float scaleB(float multiplicand, int exponent);
    public abstract double scaleB(double multiplicand, int exponent);
    public abstract int compare(byte a, byte b);
    public abstract int compare(short a, short b);
    public abstract int compare(int a, int b);
    public abstract int compare(long a, long b);
    public abstract int compare(float a, float b);
    public abstract int compare(double a, double b);
    public abstract int compare(float a, float b, float epsilon);
    public abstract int compare(double a, double b, double epsilon);
    public abstract int compareSign(byte a, byte b);
    public abstract int compareSign(short a, short b);
    public abstract int compareSign(int a, int b);
    public abstract int compareSign(long a, long b);
    public abstract int compareSign(float a, float b);
    public abstract int compareSign(double a, double b);
    public abstract byte max(byte a, byte b);
    public abstract short max(short a, short b);
    public abstract int max(int a, int b);
    public abstract long max(long a, long b);
    public abstract float max(float a, float b);
    public abstract double max(double a, double b);
    public abstract byte max(byte a, byte b, byte c);
    public abstract short max(short a, short b, short c);
    public abstract int max(int a, int b, int c);
    public abstract long max(long a, long b, long c);
    public abstract float max(float a, float b, float c);
    public abstract double max(double a, double b, double c);
    public abstract byte min(byte a, byte b);
    public abstract short min(short a, short b);
    public abstract int min(int a, int b);
    public abstract long min(long a, long b);
    public abstract float min(float a, float b);
    public abstract double min(double a, double b);
    public abstract byte min(byte a, byte b, byte c);
    public abstract short min(short a, short b, short c);
    public abstract int min(int a, int b, int c);
    public abstract long min(long a, long b, long c);
    public abstract float min(float a, float b, float c);
    public abstract double min(double a, double b, double c);
    public abstract byte clamp(byte value, byte min, byte max);
    public abstract byte clamp(short value, byte min, byte max);
    public abstract short clamp(short value, short min, short max);
    public abstract short clamp(int value, short min, short max);
    public abstract int clamp(int value, int min, int max);
    public abstract int clamp(long value, int min, int max);
    public abstract long clamp(long value, long min, long max);
    public abstract float clamp(float value, float min, float max);
    public abstract double clamp(double value, double min, double max);
    public abstract boolean equals(float a, float b, float epsilon);
    public abstract boolean equals(double a, double b, double epsilon);
    public abstract int unsignedCompare(byte a, byte b);
    public abstract int unsignedCompare(short a, short b);
    public abstract int unsignedCompare(int a, int b);
    public abstract int unsignedCompare(long a, long b);
    public abstract byte unsignedMax(byte a, byte b);
    public abstract short unsignedMax(short a, short b);
    public abstract int unsignedMax(int a, int b);
    public abstract long unsignedMax(long a, long b);
    public abstract byte unsignedMax(byte a, byte b, byte c);
    public abstract short unsignedMax(short a, short b, short c);
    public abstract int unsignedMax(int a, int b, int c);
    public abstract long unsignedMax(long a, long b, long c);
    public abstract byte unsignedMin(byte a, byte b);
    public abstract short unsignedMin(short a, short b);
    public abstract int unsignedMin(int a, int b);
    public abstract long unsignedMin(long a, long b);
    public abstract byte unsignedMin(byte a, byte b, byte c);
    public abstract short unsignedMin(short a, short b, short c);
    public abstract int unsignedMin(int a, int b, int c);
    public abstract long unsignedMin(long a, long b, long c);
    public abstract byte unsignedClamp(byte value, byte min, byte max);
    public abstract byte unsignedClamp(short value, byte min, byte max);
    public abstract short unsignedClamp(short value, short min, short max);
    public abstract short unsignedClamp(int value, short min, short max);
    public abstract int unsignedClamp(int value, int min, int max);
    public abstract int unsignedClamp(long value, int min, int max);
    public abstract long unsignedClamp(long value, long min, long max);
    public abstract float normalize(float value, float min, float max);
    public abstract double normalize(double value, double min, double max);
    public abstract float saturate(float value);
    public abstract double saturate(double value);
    public abstract int sign(byte value);
    public abstract int sign(short value);
    public abstract int sign(int value);
    public abstract int sign(long value);
    public abstract float sign(float value);
    public abstract double sign(double value);
    public abstract int getExponent(float value);
    public abstract int getExponent(double value);
    public abstract int clz(byte value);
    public abstract int clz(short value);
    public abstract int clz(int value);
    public abstract int clz(long value);
    public abstract int clon(byte value);
    public abstract int clon(short value);
    public abstract int clon(int value);
    public abstract int clon(long value);
    public abstract int ctz(byte value);
    public abstract int ctz(short value);
    public abstract int ctz(int value);
    public abstract int ctz(long value);
    public abstract int cton(byte value);
    public abstract int cton(short value);
    public abstract int cton(int value);
    public abstract int cton(long value);
    public abstract int bitCount(byte value);
    public abstract int bitCount(short value);
    public abstract int bitCount(int value);
    public abstract int bitCount(long value);
    public abstract boolean isFinite(float value);
    public abstract boolean isInfinite(float value);
    public abstract boolean isNaN(float value);
    public abstract boolean isFinite(double value);
    public abstract boolean isInfinite(double value);
    public abstract boolean isNaN(double value);
    public abstract boolean isPowerOfTwo(byte value);
    public abstract boolean isPowerOfTwo(short value);
    public abstract boolean isPowerOfTwo(int value);
    public abstract boolean isPowerOfTwo(long value);
    public abstract boolean unsignedIsPowerOfTwo(byte value);
    public abstract boolean unsignedIsPowerOfTwo(short value);
    public abstract boolean unsignedIsPowerOfTwo(int value);
    public abstract boolean unsignedIsPowerOfTwo(long value);
    public abstract boolean isInteger(float value);
    public abstract boolean isInteger(double value);
    public abstract boolean absEqualsOne(byte value);
    public abstract boolean absEqualsOne(short value);
    public abstract boolean absEqualsOne(int value);
    public abstract boolean absEqualsOne(long value);
    public abstract boolean absEqualsOne(float value);
    public abstract boolean absEqualsOne(double value);
    public abstract byte toByte(short value);
    public abstract short toShort(int value);
    public abstract int toInt(long value);
    public abstract float toFloat(double value);
    public abstract byte toByteExact(short value);
    public abstract short toShortExact(int value);
    public abstract int toIntExact(long value);
    public abstract float toFloatExact(double value);
    public abstract byte unsignedToByteExact(short value);
    public abstract short unsignedToShortExact(int value);
    public abstract int unsignedToIntExact(long value);
    public abstract short toUnsignedShort(byte value);
    public abstract int toUnsignedInt(short value);
    public abstract long toUnsignedLong(int value);
    public abstract int toIntBits(float value);
    public abstract int toRawIntBits(float value);
    public abstract long toLongBits(double value);
    public abstract long toRawLongBits(double value);
    public abstract float bitsToFloat(int bits);
    public abstract double bitsToDouble(long bits);
    public abstract byte compress(byte value, byte mask);
    public abstract byte expand(byte value, byte mask);
    public abstract short compress(short value, short mask);
    public abstract short expand(short value, short mask);
    public abstract int compress(int value, int mask);
    public abstract int expand(int value, int mask);
    public abstract long compress(long value, long mask);
    public abstract long expand(long value, long mask);
    public abstract int compare(boolean a, boolean b);
    public abstract boolean logicalAnd(boolean a, boolean b);
    public abstract boolean logicalOr(boolean a, boolean b);
    public abstract boolean logicalXor(boolean a, boolean b);

}
